pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
-- initialization
function _init()
	-- create enums
	music()
	status = {
		empty = 0,
		red = 1,
		redb = 2,
		blueinv = 7,
		blue = 4,
		blueb = 8,
		redinv = 13,
		standard = 16,
		prime = 32}
	sprites = {
		p1 = 3,
		p2 = 4,
		red = 1,
		blue = 2,
		p1point = 5,
		p2point = 6,
		invalid = 7,
		check = 14,
		cross = 15}
	states = {
		menu = 0,
		rules = 1,
		game = 2,
		roundend = 3,
		gameend = 4,
		pause = 5}
	colors = {
		red = 8,
		blue = 12,
		white = 7,
		gray = 6,
		darkgray = 5}
	sounds = {
		move = 0,
		tile = 1,
		menumove = 2,
		click = 3,
		clearboard = 4}
	pointloc = {
		p1x = 32,
		p2x = 80,
		y = 72}
	ox = 32
	oy = 24
	modes ={
		comp = 0,
		human = 1,
		rules = 2}
	mode = modes.comp
	anim = {
		x = rnd(25),
		y = rnd(20) + 70,
		w = 24,
		h = 24,
		vx = -.9,
		vy = 1.4}
	anim2 = {
		x = rnd(30) + 40,
		y = rnd(50),
		w = 24,
		h = 24,
		vx = 1.4,
		vy = -.8}
	state = states.menu
	rulesstate = 1
	timer=0
	--initialize game components
	initrules()
end
-->8
-- drawing logic
function _draw()
	if (state == states.game) drawgame()
	if (state == states.roundend) drawroundend()
	if (state == states.gameend) drawgameend() 
	if (state == states.menu) drawmenu()
	if (state == states.rules) drawhowtoplay()
	if (state == states.pause) drawpause()
end

function drawmenu()
	cls()
	map(16,0)
	print("1-plyr", 10, 122, colors.white)
	print("2-plyr", 47, 122, colors.white)
	print("how to play", 84, 122, colors.white)
	if mode == modes.comp then
		spr(sprites.red, 0, 120)
		print("1-plyr", 10, 122, colors.red)
	elseif mode == modes.human then
		spr(sprites.red, 37, 120)
		print("2-plyr", 47, 122, colors.red)
	else
		spr(sprites.red, 74, 120)
		print("how to play", 84, 122, colors.red)		
	end
end

function drawgame()
	cls(colors.darkgray)
	drawanim(anim, false)
	drawanim(anim2, false)
	checkcollision(false)
	map()
	drawgrid()
	drawplayer()
	drawscore()
end

function drawpause()
	rectfill(30, 38, 89, 60, 0)
	print("exit to menu?", 34, 42, colors.white)
	print("no", 48, 52, colors.white)
	print("yes", 72, 52, colors.white)
	if pausestate then
		print("yes", 72, 52, colors.red)
		spr(sprites.red, 62, 50)
	else
		print("no", 48, 52, colors.red)
		spr(sprites.red, 38, 50)
	end
end

function drawplayer()
	if p1isactive then
		spr(p1.sprite, p1.col * 8 + ox, p1.row * 8 + oy)
	else
		spr(p2.sprite, p2.col * 8 + ox, p2.row * 8 + oy)
	end
end

function drawhowtoplay()
	cls(5)
	rect(-1,12,128,14,colors.gray)
	line(1,13,126,13,0)
	printcenter("how to play british square", 4, colors.white)
	local rule = rules[rulesstate]
	local y = 10
	for i = 1, #rule do
		y += 10
		printcenter(rule[i], y, colors.white)
	end
	if rulesstate == 2 then
		map(0,-5)
		spr(sprites.cross,56,88)
	elseif rulesstate == 3 then
		rect(2,90,125, 124, colors.gray)
		map(51, -11)
		local check = 94
		-- red by blue
		spr(sprites.cross,12,check)
		-- red by red
		spr(sprites.check,44,check)
		-- blue by blue
		spr(sprites.check,76,check)
		-- diagonal
		spr(sprites.check, 108, check)
	elseif rulesstate == 4 then
		map(36, -7)
	elseif rulesstate == 5 then
		rect(18,113, 110, 125, colors.gray)
		printcenter("no points", 117, colors.white)
		print("+2", 24, 117, colors.red)
		print("+2", 98, 117, colors.blue)
	end
end

function drawscore()
	print(scores.p1, pointloc.p1x, pointloc.y + 10, colors.red)
	print(scores.p2, pointloc.p2x + 5, pointloc.y + 10, colors.blue)
	spr(sprites.p1point, pointloc.p1x, pointloc.y - (scores.p1 * 8))
	spr(sprites.p2point, pointloc.p2x, pointloc.y - (scores.p2 * 8))
end

function drawgameend()
	drawanim(anim, true)
	drawanim(anim2, true)
	checkcollision(true)
	if scores.p1 >= 7 then
		printcenter("red wins!",6,colors.red)
	else
		printcenter("blue wins!",6,colors.blue)
	end 
	printcenter("press üÖæÔ∏è to play again.", 14,colors.white)
	p1isactive = scores.p1 >= 7
	printcenter("press ‚ùé to go to the menu", 116, colors.white)
end

function drawroundend()
	drawgame()
	printcenter("end of the round.", 6, colors.white)
	printcenter("press üÖæÔ∏è to continue.", 14, colors.white)
	if redcount > bluecount then
		print("+"..redcount-bluecount, 56, 82, colors.red)
	elseif bluecount > redcount then
		print("+"..bluecount-redcount, 56, 82, colors.blue)
	else
		print("no points", 43, 82, colors.white)
	end
end

function drawgrid()
	for r=1, 5 do
		for c=1, 5 do
			local tile = grid[r][c]
			if tile & status.red == status.red then
			 --place red
			 spr(sprites.red, ox+(8*c), oy+(8*r))
			end
			if tile & status.blue == status.blue then
			 --place blue
			 spr(sprites.blue, ox+(8*c), oy+(8*r))
			end
		end
	end
end

function drawanim(obj, sound)
	local spritex = 8
	if (not p1isactive) spritex = 16
	sspr(spritex,0,8,8,obj.x,obj.y,obj.w,obj.h)
	obj.x+= obj.vx
	obj.y+= obj.vy
	if obj.x >= 128 - obj.w then
		obj.x = 128 - obj.w
		obj.vx *= -1
		if (sound) sfx(sounds.click)
	elseif obj.x < 0 then
		obj.x = 0
		obj.vx *= -1
		if (sound) sfx(sounds.click)
	end
	if obj.y >= 128 - obj.h then
		obj.y = 128 - obj.h
		obj.vy *= -1
		if (sound) sfx(sounds.click)
	elseif obj.y < 0 then
		obj.y = 0
		obj.vy *= -1
		if (sound) sfx(sounds.click)
	end
end

-->8
-- manage game state
function _update()
	if (state == states.game) doturn()
	if (state == states.roundend) waitfornewround()
	if (state == states.gameend) waitfornewgame()
	if (state == states.menu) menu()
	if (state == states.rules) howtoplay()
	if (state == states.pause) pausemenu()
end

function menu()
	if (waitfortimer(10)) return

	if btnp(‚¨ÜÔ∏è) or btnp(‚¨ÖÔ∏è) then
		mode = (mode + 2) % 3
		sfx(sounds.menumove)
	elseif 	btnp(‚¨áÔ∏è) or btnp(‚û°Ô∏è) then
		mode = (mode + 1) % 3
		sfx(sounds.menumove)
	end
	if btn(üÖæÔ∏è) and mode != modes.rules then
		state = states.game
		initgamevariables()
		sfx(sounds.click)
		timer = 0
	elseif btn(üÖæÔ∏è) then
		state = states.rules
		rulesstate = 1
		sfx(sounds.click)
		timer = 0
	end
end

function pausemenu()
	if (waitfortimer(10)) return

	if btnp(‚¨ÜÔ∏è) or btnp(‚¨ÖÔ∏è)
	 or btnp(‚¨áÔ∏è) or btnp(‚û°Ô∏è) then
		pausestate = not pausestate
	end

	if btnp(üÖæÔ∏è) and pausestate then
		state = states.menu
		timer = 0
		return
	end

	if btnp(‚ùé)  
	 or (btnp(üÖæÔ∏è) and not pausestate) then
		state = states.game
		timer = 0
		return
	end
end


function waitfornewround()
	if (waitfortimer(10)) return

	if btnp(üÖæÔ∏è) then
		state = states.game
		sfx(sounds.clearboard)
		initgrid()
		timer = 0
		if scores.p1 > scores.p2 then
			p1isactive = false
		elseif scores.p2 > scores.p1 then
			p1isactive = true
		else
			p1isactive = lastplaced == status.red
		end
	end
end

function waitfornewgame()
	if (waitfortimer(10)) return

	if btnp(üÖæÔ∏è) then
		state = states.game
		sfx(sounds.clearboard)
		initgamevariables()
		initgrid()
		timer = 0
	end
	if btnp(‚ùé) then
		state = states.menu
		sfx(sounds.click)
		initgamevariables()
		initgrid()
		timer = 0
	end
end

function howtoplay()
	if (waitfortimer(10)) return

	if btnp(üÖæÔ∏è) or btnp(‚ùé)
		or btnp(‚¨ÜÔ∏è) or btnp(‚¨ÖÔ∏è)
		or btnp(‚û°Ô∏è) or btnp(‚¨áÔ∏è) then
		rulesstate += 1
		sfx(sounds.click)
		timer = 0
	end

	if rulesstate >= 6 then
		state = states.menu
	end
end

function doturn()
	if mode == modes.comp and not p1isactive then
		compturn()
		return
	end
	if not hasvalidspaces(status.blueinv) and not hasvalidspaces(status.redinv) then
		roundend()
		return
	end
	if p1isactive then
		checkcontroller(p1)
	else
		checkcontroller(p2)
	end
end


function checkcontroller(player)
	local r = player.row
	local c = player.col
	if (btnp(‚¨ÖÔ∏è)) player.col-=1
	if (btnp(‚û°Ô∏è)) player.col+=1
	if (btnp(‚¨ÜÔ∏è)) player.row-=1
	if (btnp(‚¨áÔ∏è)) player.row+=1
	
	-- keep player in bounds
	if (player.col < 1) player.col = 1
	if (player.row < 1) player.row = 1
	if (player.col > 5) player.col = 5
	if (player.row > 5) player.row = 5

	setisvalid(player)
	
	if r != player.row or c != player.col then
		sfx(sounds.move)
	end

	if btnp(üÖæÔ∏è)   and player.isvalid then
		placetile(player.row,player.col)
		setactiveplayer()
		return
	end
	if btnp(‚ùé) then
		state = states.pause
		pausestate = false
		return
	end
end

-->8
-- game logic
function initgamevariables()
	initgrid()
	p1 = {
		isvalid = true,
		sprite = sprites.p1,
		row=1,
		col=1}
	p2 = {
		sprite = sprites.p2,
		row = 1,
		col = 1,
		hasdest = false,
		destcol = 0,
		destrow = 0}
	p1isactive = true
	scores = {
		p1 = 0,
		p2 = 0}
	redcount = 0
	bluecount = 0
	timer = 0
	pausestate = false
	firstturn = true
	lastplaced = status.red
end

function initgrid()
	grid = {}
	for i=1, 5 do
		if i % 5 <= 1 then
			grid[i] = {
			status.empty,
			status.standard,
			status.standard,
			status.standard,
			status.empty}
		elseif i == 3 then
			grid[i] = {
			status.standard,
			status.standard,
			status.prime,
			status.standard,
			status.standard}
		else 
			grid[i] = {
			status.standard,
			status.prime,
			status.standard,
			status.prime,
			status.standard}
		end
	end
	-- set center invalid for first turn
	grid[3][3] = status.blueb | status.redb
	firstturn = true
end

function placetile(row, col)
	if firstturn then
		-- reset center to its default
		grid[3][3] = status.prime
		firstturn = false
	end
	-- get correct color
	local tile = status.red
	local block = status.redb
	if not p1isactive then
	 tile = status.blue
	 block = status.blueb
	end
	-- add tile to grid
	grid[row][col] = tile
	lastplaced = tile
	-- set blocked tiles
	if row != 1 then
	 grid[row-1][col] = grid[row-1][col] | block
	end
	if row != 5 then
	 grid[row+1][col] = grid[row+1][col] | block
	end
	if col != 1 then
	 grid[row][col-1] = grid[row][col-1] | block
	end
 	if col != 5 then
	 grid[row][col+1] = grid[row][col+1] | block
	end
	sfx(sounds.tile)
end

function setactiveplayer()
	if p1isactive then
		p1isactive = not hasvalidspaces(status.blueinv)	
	else
		p1isactive = hasvalidspaces(status.redinv)
	end

end

function setisvalid(player)
	local tile = grid[player.row][player.col]
	local inv = status.redinv
	local sprite = sprites.p1
	if not p1isactive then
		inv = status.blueinv
		sprite = sprites.p2
	end
	if tile & inv == 0
		then
		player.isvalid = true
		player.sprite = sprite
	else
		player.isvalid = false
		player.sprite = sprites.invalid
	end
end

function compturn()
	if p2.hasdest then
		if p2.row == p2.destrow 
		and p2.col == p2.destcol then
			placetile(p2.row, p2.col)
			p2.hasdest = false
			p1isactive = hasvalidspaces(status.redinv)
			timer = 0
		else
			movecomp()
		end
	else
		easyturn()
	end
end

function movecomp()
	if (waitfortimer(13)) return
 	
	timer = 0
	if p2.row > p2.destrow then
		p2.row -= 1
	elseif p2.col > p2.destcol then
		p2.col -= 1
	elseif p2.row < p2.destrow then
		p2.row += 1
	elseif p2.col < p2.destcol then
		p2.col += 1
	end
	
	sfx(sounds.move)
	
	if grid[p2.row][p2.col] & status.blueinv == 0 then
		p2.sprite = sprites.p2
	else
		p2.sprite = sprites.invalid
	end
end

function easyturn()
 local valid = {}
 local prime = {}
 local standard = {}
 local empty = {}
	for r = 1, 5 do
 		for c = 1, 5 do
			local currtile = grid[r][c]
 			if currtile & status.blueinv == 0 then
   				add(valid, {row = r, col = c})
				if currtile & status.prime > 0  
				 and currtile & status.blueb == 0 then
					add(prime,{row = r, col = c})
				end  
				if currtile & status.standard > 0  
				 and currtile & status.blueb == 0 then
					add(standard,{row = r, col = c})
				end
				if currtile & status.blueb == 0 then
					add(empty, {row = r, col = c})
				end
			end -- end if is valid
		end -- end for c
	end --end for r
 
 if #valid == 0 then
 	roundend()
 	return
 end
 
 local tile = {}
 if #prime != 0 then
		tile = prime[ceil(rnd(#prime))]
 elseif #standard != 0 then
 	tile = standard[ceil(rnd(#standard))]
 elseif #empty != 0 then
	tile = empty[ceil(rnd(#empty))]
 else
		tile = valid[ceil(rnd(#valid))]
 end
 p2.destcol = tile.col
 p2.destrow = tile.row
 p2.hasdest = true
end

function hasvalidspaces(invalid)
	for r = 1, 5 do
		for c = 1, 5 do
		 if grid[r][c] & invalid == 0 then
		 	return true
		 end
		end
	end
	return false
end

function roundend()
	redcount = 0
	bluecount = 0
	for r = 1, 5 do
		for c = 1, 5 do
		 if grid[r][c] & status.blue > 0 then
		 	bluecount+=1
		 elseif grid[r][c] & status.red > 0 then
			redcount+=1
		 end
		end
	end
	
	if redcount > bluecount then
		scores.p1 += redcount - bluecount
	elseif bluecount > redcount then
		scores.p2 += bluecount - redcount
	end

	if scores.p1 >= 7 or scores.p2 >= 7 then
		--trigger end of game
		state = states.gameend
	else
		state = states.roundend
	end
end


-->8
-- utils
function checkcollision(sound)
	if ((anim.x < anim2.x and anim.x + anim.w > anim2.x)
		or (anim2.x < anim.x and anim2.x + anim2.w > anim.x))
		and 
		((anim.y < anim2.y and anim.y + anim.w > anim2.y)
		or (anim2.y < anim.y and anim2.y + anim2.w > anim.y)) then

		if (sound) sfx(sounds.click)

		local vx1 = anim.vx
		anim.vx = anim2.vx
		anim2.vx = vx1
		local vy1 = anim.vy
		anim.vy = anim2.vy
		anim2.vy = vy1
	end
end

function printcenter(text, y, color)
	print(text, #text * -2 + 64, y, color)
end

function waitfortimer(time)
	if timer < time then
		timer += 1
		return true
	end
	return false
end

function initrules()
	rules = {
		{"the object of the game is", "to end each round with more", 
		"of your tiles on the board", "than your opponent.",
		"", "the first player to 7", "points wins!",
		"", "press any button to continue."},
		{"the first player may place", "a piece anywhere on the board",
		"except the center square on", "the first move."},
		{"the second player may place", "a piece on any square",
		"including the center square", "so long as its side is not",
		"facing an opponent's piece.", "pieces may be placed by",
		"their own color."},
		{"play continues until no more", "moves are possible for",
		"either color."},
		{"at the end of the round", "the tiles are counted",
		"and the player with the most", "tiles is awarded points",
		"equal to the difference.", "", "the player with the least",
		"points will go first at", "the beginning of the next round."}
	}
end
__gfx__
000000002eeeeee21dddddd1eeeeeeeecccccccc0000000000000000666666664ffffff44ffffff444444444444444444444444444444444000000bb88000088
000000008222222ec111111de000000ec000000c000000000000000060000006f444444ff444444f47744774444444444444444444444444000000bb88800880
00700700828e8e2ec1cdcd1de000000ec000000c000000000000000060000006f4ffff4ff4ffff4f7444747447744477444444446449944600000bb008888880
000770008288e82ec1ccdc1de000000ec000000c00088000000cc00060000006f4ffff4ff4f44f4f4744477447474744444554444494494400000bb000088000
0007700082888e2ec1cccd1de000000ec000000c00088000000cc00060000006f4ffff4ff4f44f4f44747474477444744445544449444494bb00bb0000088000
007007008288882ec1cccc1de000000ec000000c000000000000000060000006f4ffff4ff4ffff4f77444774474744474444444494466449bbb0bb0008888880
000000008222222ec111111de000000ec000000c000000000000000060000006f444444ff444444f444444444774477444444444444444440bbbb00088800888
00000000288888821cccccc1eeeeeeeecccccccc0000000000000000666666664ffffff44ffffff444444444444444444444444444444444000bb00088000088
11117777777777777777777711111212221122112212222112222222222222222222222222222222222222222222222222222222111111111111111111111111
11117000707777777777000711112222222222222222222222222222222222222222222222222222222222222222222222222222222221111111111111111111
11117070777777777777070711222222222222444422222222222222222222222222224444444444444444422222222222222222222222222111111111111111
11117070707007000777000711444444444444444444444444444444444444444444444444444444444444422222222222222222222222222222221111111111
11117007707077070707070722777777777777777744444444444444444444447774444444444444444447744444444444422222477777774222222221111111
11127077707007000777000725777777777777777777444444444444444444477777444447774444444477774444444444444442577777774222222222222211
22227888888888888888888725777777777777777777744444444444444444577777444447774444444577777444444444444444577777774222222222222221
42227aaaaaaaaaaaaaaaaaa725555777775555577777744444444444444444577777444477774444444577774444444444444444555577777422222222222222
22227bbbbbbbbbbbbbbbbbb724445777774444577777744444444444444444557774444477774444444557774444444444444444444477777444444422222222
22227777777777777777777744445777774444577777744444444444777444455554447777774444444445544444444477777744444477777447777444222222
22222222222222222244444444445777774444577777744777777747777747777777477777777777477777777444477777777777744477777477777774222222
22222222222222222244444444445777777777777774445777777777777757777777577777777777577777777445777777777777744577777777777777444222
22222222222222222244444444445777777777777744445557777777777755577777555777775554555577777445777775555477744577777755777777444422
22222222224444444444444444445777777777777777744457777755777744577777445777774444444477777445777777444447744577777554477777444442
42222222222244444444444444445777775555577777774457777745577444577777445577777444444477777445777777777774444577777444477777444442
22222222222222222222222222245777774444557777774457777744555444577777444577777444444477777445577777777777744577777444477777444442
22222222222222222222222222245777774444457777774457777744444444577777444577777447444477777444555777777777774577777444477777444422
22222222222222222222222224445777774444457777774457777744444444577777444577777447744477777444777555577777774577777444477777444422
22222222222244222222444444447777777777777777774447777744444444577777744577777447744477777745777744444777774477777744477777444442
22222222444444444444477757777777777777777777745777777777744457777777777577777777757777777775777777777777744777777775777777777442
22222224477777777744477757777777777777777777445777777777744457777777777557777777757777777775577777777777457777777775777777777422
22222445777777777777777755555555555555555544445555555555444455555555554455577774455555555444555577777744455555555445555555554422
22222557777777777777777744444444444444444444444444444444444444444444444444555554444444444444444555544444444444444444444444442222
22224577777744445557777744444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444222222
22244577777744444455777744444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444422222222
44444577777744444445577744444777774477777774771117887111174444777777774444447777777747774444447777774444444444444444444222222222
22444577777777774444577744477777777777777774187117887117874477777777777744447777777777777744777777777744444444422222222222222222
24444577777777777777444444477777777777777774178717887178714777775577777744457777777777777747777777777774444442222222222222222222
22222557777777777777777444777775555777777444117877887787115777774447777774455577777757777747777755577774444442222222222222222222
22222455777777777777777744777774444777777444111787887871115777774447777774444477777757777477777744477777444422222222222222222222
22222445557777777777777747777774444777777444777777887777775554444477777774444477777755777577777777777777444422222222222222222222
22222557744447777777777747777774444777777444888888888888884444777777777774444477777745554577777777777777442222222222222222222222
22222577774445555577777747777774444777777444777777887777774477777747777774444477777744444577777755555544444444222222222222222222
22222577774444445557777747777774444777777444111787887871114777775547777774774477777744444577777744444777444444222222222222222224
22222577777444444557777745777774444777777444117877887787114777774447777774774477777744444557777744447777444444444222222222222222
22222577777774444577777745777777777777777444178717887178715777777777777774774777777774444457777774447777444444444444444222222224
22222577777777777777777445577777777777777444787117887117815777777777777777744777777777744455777777777774444444444444444422422224
22222577757777777777774444557777774777777444711117887111775577777774577777757777777777744445557777777444444444444444444444222224
22444555555555777774444515555555544777777444444444444444444555555444555554455555555554444444455555554444444444444444444444442224
22222244444445555544444111144444444777777444444444444444444444444444444444444444444444444444444444444444444444444444444444444224
22222242444444444444444001144444444777777444444477747474777447774777477747774777477747774747447774777474447477744444444444444444
4444444444442244444444445564e444577777777774444447447474774447444474474747474474477447444747447444747477477477444444444444444444
42222222244211124444444455664444577777777774444447447774744444774474477447774474474447474474447474777474747474444444444444444444
42222222222001124444444411d6d444577777777774444447447474777447774474474747474474477747774474447774747474447477744444444444444444
442442444220011224444445557f4444555555554444444444444444444444444444444444444444444444444444444444444444444444444eeeee4444444444
44451524244222d44444442dd104e44444444444444444444444444444444777477744777477747774777477747774777477444444444444ee4eee4444444444
24511112444451d6e44442211dd5222444444444444444444444444444444747474444747474747444474447444744747474744444444444ee44444444444444
44200112444d15565444444515d55d40244424444444444444444444444447474774447774747447744744474447447474747444444444444e48884444eeeeee
222005d242215d644444444111155444455564444444444444444444444447774744447444777477747774474477747774747444444444444888888ee4eeee44
2222152222255014e44444401111d144421152444444444444444444444444444444444444444444444444444444444444444444444444444888888ee44eeeee
222415dd244515d1244244400015574442110544444444444444444444444444444444444444444ffff4fff444444f44444444444444444448888884e448eeee
2225117d244211115112244000155444440155e44444444444444444444444455dd44444444444ff44fff4e4e4ee4444fffff44444444444488888884444fe44
225dd1052222111055522440001154444441156444444444444444444444555dd5dd7d444444ffffffff4444eeeeef44ffffef44444444448888888884444448
22551755115501006144425100000444445166644244444444444444444211155675554444ffffff77ff444848fe4844ffffffff444444448888888444448888
44455555555111115544444555115644455dd644224444444444444444411111d555552ffffffffff7ff444444448888ef4444fee44444448888888844448888
44255115524500151d4444445d5115d4e11dd5024444444444444444444111111555555fffffffffff7744444488888844eeee44444444448888888844448888
2225551d554200101524444e551117544051514ee4444444445d5d44444111111555555defffffffffff4444448888884e444ee844e444444888888444448888
44511115714500000124444451557f4e225112fe4444444555d515d644211111155555555fffffffff7444444488888884888844efe444444488884444448888
44401110fe44410005d4444451575d4e4111111574444411515d67d54411111115555555555dffff7fe44444448888888444884fe44844444888888444448888
444111102444d115115d44455155d544515000001444421111d655555411111115555555551115ffeee44444444888888444444ee88884444888884444448888
222111112222211511d511111101515250111d101e444111111555555511111115555555551110444444444444448888444444448888844444eee84444448888
445111115444455d5d7521111010112dde500015de44e111111555555511111115555155551111444e424444eeeee848444444488ee88444eeeeeeee44448888
44451111244425257552e211101111002d10000102442111111555555511111115555155555511444e22444eeeeeeee444444448848884e4448eeeefe4448888
2222152222110155d552e222111010002d00000042fe111111155555555111111555555555d4554df722444eeeee7f448444444888888844444eee4488448888
222212222111151d155d4224421110012e10000145f411111115555555dd111115555555555ff6f7ff42444888fe488888444448888888444444488888448888
222505551111151115544724420000015410001155d611111115555555d5111115555555555ffffff42444888848888888444444888888444444488888848884
2251151552511d11111111222110000115500105fff511111115555555551111155555555d7fffffff4444444888888888844444888884444444488888844444
2551111d522521111111556111000001516505fffff1111111155555555551111555555dff44eeefff744844848888888844444488888444444448888884eeee
1111111512222151115515d551110111156ffffffff1111111155555555551111155552444eee4eeeff48448448888888888444488888444444448888884eeee
101111111522215155dd5555d61011005fffffffffd111111115555555555511115556e88884eeff44e48844444888888888444448888444444448888884fff4
51111111015211211111dd6d5150016fffffffffff5111111115555555555dd5d55777484884ff44884484884448888888884444488884444444448888884fff
255111122222111111116515151dffffffffffffff11111111155555555554fff7ffff4444444488888848444488888888844444448844444444444888884fff
2222222222221111111151111155ffffffffffffff5151111115555555567ffffffffe4444448888888844444488888888884444484444444444d55d44884eff
2222222222111111111111111111ffff55dffffffff75111111555555d7fe44efffff444444888888888444444488888888884444844444444d5d5dddd4484ff
2222222225111111111111111115d61515d16ffff7fff51111155555244eeeee4ef77444444488888888444444488888888444444844444425d5dd5dd76244ff
4444222225551111111111111115555d555dd6f7ffe9f4551115555e448ee8eeefee44444444888888844444444888888844444444ff4442111155d76512484f
22242222222221111111111111111555dd66d55e4eeeefed4555577444484eefe8e4444444448888888844444448888888884ff77ffe4442111111651515244f
444444444444d1111111111511111111665555544efffffffffffff444484f448888848444444888888884444444888884e4fffffff7f44211111111111124ff
44444444444ff111111111111111111155555555eefffffffffffff4444448848888844444444888888888444444888844f7ff77d7fff771111111111115567f
44444444efff6111111115111111111155555555ef8fffffffffffe444444488888884444444488888888844444488884efff7d5dd5f777111111115155555df
444444ffffff51111111111111111111555555555754ffffffffff44444448844488844444444884888888444444ee44f44455ddd555ddd11111111115555555
444effffffff1111111111111111111115555551171154ffffff7f2444444488888888444444488888888844444ee47774555d5d55d67d551111111155555555
4fffffffffff111111111111111111111555515555515154f7ff4422444444888888888444444888888888eeffff77fff421155d567d55551111111515555555
ffffffffeffd11111111111111111111155555555555511154444444444444888888888444444888888884e4f7ff7fff441111115d5555551111111155555555
fffffffefee51111111111111111111115555555555511111444444444444488888888844444488888884e7fffffffffd4111111115555551111111555555555
fffffefeeed11111111111111111111115555555555551111444422444e44888888888844444448888847fffffffffff7f111111115515555111111155555555
ffeeedf4445551111111115111111111155555555555555554444224444e448488888888444444888444efffd5ddfff775515d51115515555111111155555555
ffeeddd44555551111111111111111111555555515155555554df2244eeeee8848888888444448844f7444d555d6dd66d5115551115555555111111155555555
feeed4d44455555511111111111111111551155555556d5554f742444eeeeeee448e888eee44484e7774555dddd5d676d1111111155555555511111155555555
fefedd44444455555511155d111111111555511511556fffffff2448eeeeeeefe88888884ffe4e7777655555d5dd76d551111511115555555511111155555555
d55554444444dd44445557f1111111111111115555555fffffff44488eeeefee888888884fffff77ff4515555d77d55151111111115555555551111155555555
555554444444eefffffffff111111111111555555155fffffffe4444484fe48444888844ffffffffff45111555d5555151111111115555555551111155555555
f4555deeeeeeffffffffffd511111111155555555d7fffffffff444444448888488844ffffffffffffd111111155555555111111115555555551111155555567
455dfeeffffffffddddfd44551111111151555567fffffffffff444444448888e4844ffffffffffff75111111115555555111111115515555555111155555777
ffffffeff5554ff5555444455551111115555554fffffffffff7444444448e88844444effffffff77f1111111115551111111111115555555555511155577fff
ffffffff55555ff5115444d45555511115515fd554fffffff7fe4444444488888e444444effff77fd41111111115555515511111115555555555dd515677ffff
fffffffef6d84ffd115dd4de445555111557ff555544fff7fe44444444444888884ee444444f7fd44511111111155551555111111155555555555ff777777fff
efff8fff4558fffd1156e444eeedd66dd7fff755555554fe4444444444444888884ee444444444ddd515111111155551155511111155555555555ffff77fffff
54ff8f884df8ff4d115d884effffffffffffff555555555444444444444e48888844444444444d4d51111111111555551555111111155555555d7fffffffffff
5552ff88f888848d818808fff4fffffffffff5555555555444444444444448888884444444444ddd655111111115555555155111115555555577ffffffffffff
55588f8f89f8888881889888f8fffffffffffd55555555544444444244444888888ee44444444dddd5511115111555555555511111555555f77fffffffffffff
55a888288998a89818198999f8ffffffffffffd45555555444444444444448888888eee444444d6fd55555115115555555555511115555677fffffffffffffff
55599a89a8f9aa9a19888a88888ffffffffffffe4455555df742444444444888888844ee4444df77551111511515d555555555d55155d77fffffffffffffffff
55588a9a989a8a8a9a8a89998854fffffffffffffe4444f77f22222444444888844444efffff77f751151111111555555555556f65577ffffffffffffffffff4
55a8988a85aa88aa98affaa998555ffffffffffffffffffffd2222224444488888442e4effffffff55551555511555555555555fff77fffffff7ffffffffff44
558a8999998a5a81a899999a95555ffffffffffffffffffff444552244444884444eeeeefffffffd555555555515555555555557ffffffffffffffffffff7444
58a8999999999999999999998a554ffffffffffffffffffff2222522224444444e44e44ffffffff5515155555515555555555d7fffffffffffffffffffff4444
588999999999999999998899985dffffffffffffffffffff455222224444ee4444444fffffffffff7551115115155555555577fffffffffffffffffffff44444
5549998899999999999988999fffffffffffffffffffffed4555522222244444444e7ffffffffffff7751111111555555567ffffffffffffffffffffff444444
5549988889988998898899889ffffffff555ffffffffee444555552222244ee844eeffffffffffff77fd55111115555567ffffffffffffffffffffff74444444
5549988889999999998899889fffffff55555fffffffe444444555552244eeeee7d54dfffffff000f000f00010005000700f7000f0fff0fff0f0ff0004404044
5549998899999999999988999fffffff56d55fffffffeedddd444455522444477755554dffff70f0f0f0ff0f50ff5f0ff0f0f0f0f0fff0fff0f0ff0404404044
5549999999999999999988999fffffff555ddffffffff6d7deeed4dd44554777ff5555554ff7f0f0f00fff0ff0f0ff0ff0f0f000f0fff0ffff0ff70440440444
5549999999999999999999999ffffffff555ffffffffff676feefffffff77f7ff75555d5554fe000f0f0f000f000f000f0f0f0f0f000f000ff07ff0000440444
5549999999944444449999999f000f000f000fffff555fff6ffffffffffffffff455555555544ffffffffffffffffffffffffffffffffffffff7f44444444444
5549999999555555544999999f0fff0fff0ffffff55555fffffffffffffffffff4555555555000f000f000ff000f000f000f0ffff000f000f077404000400044
554499999555555555499999ff00ff00ff0f0ffff556555fffffffffffffffffff4555555550fff0f070f0ff0f0ff0ff00ff0fff70fff0f0f004004004404444
5554499955555555554499955f0fff0fff000ffff54555dffffffffffffffffffff455555550f0f000f0ff0f00fff0ff0fff0ffff0f0f000f040404044440044
55554445555555555554445555ffffffffffffffffd556ffffffffffffffffffffffed45555000f0f0f0000f0f0f000f000f000ff000f0f04044404000400044
555555555555555555555555555ffffffffffffffffffffffffffffffffffffffffffff4445ffffffffffffffffffffffffffffffffffff44444444444444444
__map__
00000000000000000000000000000000101112131415161718191a1b1c1d1e1f00000000000000000c0d0d0d0d0a0c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000202122232425262728292a2b2c2d2e2f00000000000000000c02080202020c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000303132333435363738393a3b3c3d3e3f00000000000000000c08010802020c000000000001020000010100000202000001080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c0a0d0d0d0d0c0000000000404142434445464748494a4b4c4d4e4f00000000000000000c01010108080c000000000008080000080800000808000008020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c08080808080c0000000000505152535455565758595a5b5c5d5e5f00000000000000000c01080108010c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c08080808080c0000000000606162636465666768696a6b6c6d6e6f00000000000000000c08020802080c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c08080908080c0000000000707172737475767778797a7b7c7d7e7f00000000000000000c0b0d0d0d0d0c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c08080808080c0000000000808182838485868788898a8b8c8d8e8f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c08080808080c0000000000909192939495969798999a9b9c9d9e9f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000c0d0d0d0d0b0c0000000000a0a1a2a3a4a5a6a7a8a9aaabacadaeaf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000b0b1b2b3b4b5b6b7b8b9babbbcbdbebf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000c0c1c2c3c4c5c6c7c8c9cacbcccdcecf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000d0d1d2d3d4d5d6d7d8d9dadbdcdddedf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000e0e1e2e3e4e5e6e7e8e9eaebecedeeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000000000000000000018020000001b0301c04023040280300000000000000000000026000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000
000200000060000600006001f6102162026600276002e6202f6100060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600
000000000f710127201373017730231001a7401b7401d7401e7501f74020730227202571000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100
00010000005000d53010530145301753012530135301f530165001650016500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
000200001c61021620266302863020600246002560026630226301d610176102e6000b6100a6100861011600136001f6001660014600146000010018600196001a6001a60000100236002a600001001260012600
012300000c7450c7050c70510745107051374516745187450c745187051070510745007051374516745187450c745007050070510745007051374516745187450c7450f745107451374516745137451674518745
012300001174500705007051574500705187451b7451d7451174500705007051574500705187451b7451d7450c745007050070510745007051374516745187450c74500000000000c74510745137451674518745
012300081c0122b0021c012240021c012240021c012240021c0002b0001c000240001c000240001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01230000210121800021012180002101218000210121800021012180002101218000210121800021012180001c012180001c012180001c012180001c012180001c012180001c012180001c012180001c01218000
012318001174500705007051574518705187451b7451a7451574500705117451a7450070518745007050070518745177451674515745147451374512745137450070500705007050070500705007050070500705
012318002101218002210121800221012180021f0121e012180021e012180021e012180021e012180021e0121f0121800218012180021a012180021b0121c0120000200002000000000000000000000000000000
01230008000021f012000022201200002240122201200002000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
012310000c745007050070510745007051374516745187450c7450070500705107450070513745167451874500705007050070500705007050070500705007050070500705007050070500705007050070500705
012300080c74500705007051074500705137451674518745000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0123180005745117450000009745157450c745187450f745157452174500000127451e7450c745187450d7450c745000000000004745107451374516745187450000000000000000000000000000000000000000
0123180021012000022101200002210121d0121f0121e012000021e012000021e012000021e012000021e0121f0120000218012000021a012000021b0121c0120000200002000020000200002000020000200002
012300000c745187451c7450f745107451374507745187450c745187451c7450f74510745137450774518745117451d745007051474515745187450c7451b745117451d745007051474515745187450c7451b745
01230000000021f012280122b01228012240122201200002000021f01228012270122801224012220120000200002240122d012300122d01229012270120000200002240122d012300122d012290122701200000
012300001c012180001c012180001c012180001c012180001c012180001c012180001c012180001c0120000021012180002101218000210121800021012180002101218000210121800021012180002101200000
012310000c745187451c7450f745107451374507745187450c745187451c7450f7451074513745077451874500000000000000000000000000000000000000000000000000000000000000000000000000000000
01231000000001f012280122b01228012240122201200002000021f01228012270122801224012220120000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01230000117451d74521745157451d74518745247451b745127451e7452274516745237451a745267451d7450c745187451c745107451c745137451f745167450c745187451c745107451c745137451f74516745
01230000210120000221012000022101200002210120000222012000022201200002230120000223012000021c012000021c012000021c012000021c012000021c012000021c012000021c012000021c01200002
012300000c74518745007050a745167450474510745077450c74518745007050a745167450474510745077451174500705007051574500705187451b7451d7451574512745157451a74500705187450070500705
012300001c0121c0021c0121f0021c012130021c012180021c0121c0021c0121f0021c012130021c012180022101200000210120000021012000001f012000001e012000001e012000001e012000001e01200000
0123000018745177451674515745147451374512745137450c745000000000010745000001374516745187450c7450b7450a74509745087450774506745077450c74500000000001074500000137451674518745
012300002101200002180121a012000021b012000021c0121c012000021c012000021c012000021c01200002210120000218012000021a012000021b012000021c012000021c012000021c012000001c01200000
0123100018745137450f745137451174515745117450c7450c74500000000001c7450000013745167451874500000000000000000000000000000000000000000000000000000000000000000000000000000000
012308000c74500705007050070500705007050070500705007050070500705007050070500705007050070500705007050070500705007050070500705007050070500705007050070500705007050070500705
012300001c0021c0121c0021f0121c002180121c002180121c0021c0121c0021f0121c002180121c0021801200000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
01 05074344
00 06084344
00 090a4344
00 0c074b44
00 0d070b44
00 0e0f4344
00 0c074344
00 10121144
00 13071444
00 15164344
00 17181d44
00 191a4344
02 1c074344

